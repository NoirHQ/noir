// This file is part of Noir.

// Copyright (C) Haderech Pte. Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-04-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmarks`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/noir
// benchmark
// pallet
// --pallet
// pallet_rewards
// --extrinsic
// *
// --output
// weights.rs
// --default-pov-mode
// measured

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};

pub trait WeightInfo {
	fn coinbase(n: u32) -> Weight;
	fn on_finalize(n: u32) -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T> WeightInfo for SubstrateWeight<T>
where
	T: frame_system::Config,
{
	/// Storage: `Rewards::Processed` (r:1 w:1)
	/// Proof: `Rewards::Processed` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `Measured`)
	/// Storage: `System::Account` (r:8192 w:8192)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Rewards::RewardLocks` (r:8192 w:8192)
	/// Proof: `Rewards::RewardLocks` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:8192 w:8192)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:8192 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `Measured`)
	/// Storage: `Rewards::Rewards` (r:0 w:1)
	/// Proof: `Rewards::Rewards` (`max_values`: None, `max_size`: Some(393230), added: 395705, mode: `Measured`)
	/// The range of component `n` is `[1, 8192]`.
	fn coinbase(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491 + n * (2475 ±0)`
		// Minimum execution time: 34_385_000 picoseconds.
		Weight::from_parts(34_775_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			// Standard Error: 29_018
			.saturating_add(Weight::from_parts(26_542_025, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
	}
	/// Storage: `Rewards::Processed` (r:1 w:1)
	/// Proof: `Rewards::Processed` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `Measured`)
	/// Storage: `Rewards::Rewards` (r:1 w:1)
	/// Proof: `Rewards::Rewards` (`max_values`: None, `max_size`: Some(393230), added: 395705, mode: `Measured`)
	/// Storage: `Rewards::RewardLocks` (r:8192 w:8192)
	/// Proof: `Rewards::RewardLocks` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:8192 w:8192)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:8192 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `Measured`)
	/// Storage: `System::Account` (r:8192 w:8192)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `n` is `[1, 8192]`.
	fn on_finalize(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `144 + n * (333 ±0)`
		//  Estimated: `3670 + n * (2809 ±0)`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_420_000, 0)
			.saturating_add(Weight::from_parts(0, 3670))
			// Standard Error: 30_046
			.saturating_add(Weight::from_parts(22_389_152, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2809).saturating_mul(n.into()))
	}
}

impl WeightInfo for () {
	/// Storage: `Rewards::Processed` (r:1 w:1)
	/// Proof: `Rewards::Processed` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `Measured`)
	/// Storage: `System::Account` (r:8192 w:8192)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Rewards::RewardLocks` (r:8192 w:8192)
	/// Proof: `Rewards::RewardLocks` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:8192 w:8192)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:8192 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `Measured`)
	/// Storage: `Rewards::Rewards` (r:0 w:1)
	/// Proof: `Rewards::Rewards` (`max_values`: None, `max_size`: Some(393230), added: 395705, mode: `Measured`)
	/// The range of component `n` is `[1, 8192]`.
	fn coinbase(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1491 + n * (2475 ±0)`
		// Minimum execution time: 34_385_000 picoseconds.
		Weight::from_parts(34_775_000, 0)
			.saturating_add(Weight::from_parts(0, 1491))
			// Standard Error: 29_018
			.saturating_add(Weight::from_parts(26_542_025, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
	}
	/// Storage: `Rewards::Processed` (r:1 w:1)
	/// Proof: `Rewards::Processed` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `Measured`)
	/// Storage: `Rewards::Rewards` (r:1 w:1)
	/// Proof: `Rewards::Rewards` (`max_values`: None, `max_size`: Some(393230), added: 395705, mode: `Measured`)
	/// Storage: `Rewards::RewardLocks` (r:8192 w:8192)
	/// Proof: `Rewards::RewardLocks` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:8192 w:8192)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `Measured`)
	/// Storage: `Balances::Freezes` (r:8192 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `Measured`)
	/// Storage: `System::Account` (r:8192 w:8192)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `n` is `[1, 8192]`.
	fn on_finalize(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `144 + n * (333 ±0)`
		//  Estimated: `3670 + n * (2809 ±0)`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_420_000, 0)
			.saturating_add(Weight::from_parts(0, 3670))
			// Standard Error: 30_046
			.saturating_add(Weight::from_parts(22_389_152, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2809).saturating_mul(n.into()))
	}
}
